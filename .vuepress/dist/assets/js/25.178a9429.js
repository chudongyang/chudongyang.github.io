(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{666:function(s,e,t){"use strict";t.r(e);var n=t(49),a=Object(n.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"npm相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#npm相关"}},[s._v("#")]),s._v(" npm相关")]),s._v(" "),t("p",[s._v("主要总结一些npm相关的知识点，方便以后查阅。。。")]),s._v(" "),t("h3",{attrs:{id:"npm命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#npm命令"}},[s._v("#")]),s._v(" npm命令")]),s._v(" "),t("ol",[t("li",[s._v("npm install 的几种方法及区别")])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("npm i express "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("save "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" npm i express "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("S")]),s._v(" （安装依赖到devDependencies）\nnpm i express "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("save"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("dev "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" npm i express "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("D")]),s._v(" （安装依赖到dependencies）\nnpm i express "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("save"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("exact （锁定依赖版本号加入到dependencies）\nnpm i express "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("save"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("exact "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("D")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("锁定依赖版本号加入到devDependencies"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("在安装依赖之前执行下面的命令，这样所有的依赖都会锁定版本号")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("npm config "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" save"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("exact "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])])]),t("blockquote",[t("p",[t("code",[s._v("npm config set")]),s._v(" 命令将配置写到了 "),t("strong",[s._v("~/.npmrc")]),s._v(" 文件，可以运行 "),t("code",[s._v("npm config list")]),s._v(" 查看")])]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("npm shrinkwrap\n上面说的锁定依赖的版本，但这并不能完全防止意外情况的发生，因为锁定的只是最外一层的依赖，而里层依赖的模块的 package.json 有可能写的是 "),t("code",[s._v('"mongoose": "*"')]),s._v("。为了彻底锁定依赖的版本，让你的应用在任何机器上安装的都是同样版本的模块（不管嵌套多少层），通过运行 "),t("code",[s._v("npm shrinkwrap")]),s._v("，会在当前目录下产生一个 "),t("code",[s._v("npm-shrinkwrap.json")]),s._v("，里面包含了通过 node_modules 计算出的模块的依赖树及版本。上面的截图也显示：只要目录下有 "),t("code",[s._v("npm-shrinkwrap.json")]),s._v(" 则运行 "),t("code",[s._v("npm install")]),s._v(" 的时候会优先使用 "),t("code",[s._v("npm-shrinkwrap.json")]),s._v(" 进行安装，没有则使用 package.json 进行安装")])]),s._v(" "),t("blockquote",[t("p",[s._v("如果 node_modules 下存在某个模块（如直接通过 "),t("code",[s._v("npm install xxx")]),s._v(" 安装的）而 package.json 中没有，运行 "),t("code",[s._v("npm shrinkwrap")]),s._v(" 则会报错。另外，npm shrinkwrap 只会生成 dependencies 的依赖，不会生成 devDependencies 的。")])]),s._v(" "),t("p",[s._v("参考链接：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/nswbmw/N-blog/blob/master/book/2.6%20npm%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("npm注意事项"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("https://docs.npmjs.com/cli/shrinkwrap")]),s._v(" "),t("li",[s._v("http://tech.meituan.com/npm-shrinkwrap.html")])]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("npm install -g typescript\n全局下载 typescript 时遇到下面这种失败的情况，可能是之前把全局的 node_modules 包删除的缘故。可以通过 "),t("code",[s._v("npm cache clean --force")]),s._v(" 清理缓存后就可以下载成功了\n"),t("img",{attrs:{src:"/npm-error.png",height:"180",width:"auto"}})])])])}),[],!1,null,null,null);e.default=a.exports}}]);