(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{654:function(t,e,n){"use strict";n.r(e);var a=n(49),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"ts-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ts-函数"}},[t._v("#")]),t._v(" ts-函数")]),t._v(" "),n("p",[t._v("在JavaScript中，有两种常见的定义函数的方式。在ts中，需要对函数的参数和返回值进行约定。")]),t._v(" "),n("ol",[n("li",[t._v("函数声明")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function fn(param:string):void{\n\tconsole.log(param)\n}\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("函数表达式")])]),t._v(" "),n("ul",[n("li",[t._v("只对等号右侧的匿名函数进行类型定义, 那么左边的变量会通过赋值操作进行类型推论而推断出来的")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let sum = function(a:number, b:number):number {\n\treturn a+b\n}\n")])])]),n("ul",[n("li",[t._v("也可以同时对左边和右边进行类型定义")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("type sumType1 = (x:number, y:number) => number\ninterface sumType2{\n\t(x:number, y:number):number\n}\nlet sum:sumType2 = function(a:number, b:number):number {\n\treturn a+b\n}\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("可选参数\n在ts中，函数的形参和实参必须一样，可以通过给最后一个参数配置可选参数达到不一样的目的。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function print(name:string, age?:number):void{\n\tconsole.log(name)\n}\nprint('hello')\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[t._v("默认参数\n在ts中和js一样，可以给形参赋个默认值")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('function print(name:string="hello", age?:number):void{\n\tconsole.log(name)\n}\nprint()\n')])])]),n("ol",{attrs:{start:"5"}},[n("li",[t._v("剩余参数")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function total(...params:number[]) {\n\treturn params.reduce((prev, next) => prev + next, 0)\n}\nconsole.log(total(1, 2, 3))\n")])])]),n("ol",{attrs:{start:"6"}},[n("li",[t._v("函数重载")])]),t._v(" "),n("ul",[n("li",[t._v("在java后端语言中，函数重载指的是两个或者两个以上的同名函数，参数不一样")]),t._v(" "),n("li",[t._v("在ts中，函数重载表现为给同一个函数提供多个函数类型定义")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 对数字和字符串进行倒序处理\nfunction reverse(x: number): number;\nfunction reverse(x: string): string;\nfunction reverse(x: any): number | string {\n\tif (typeof x === 'number') {\n\t\treturn Number(x.toString().split('').reverse().join(''));\n\t} else if (typeof x === 'string') {\n\t\treturn x.split('').reverse().join('');\n\t}\n}\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);