(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{671:function(e,t,a){"use strict";a.r(t);var r=a(49),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"node-js流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js流"}},[e._v("#")]),e._v(" Node.js流")]),e._v(" "),a("img",{attrs:{src:"/nodeJs流.jpg",height:"400",width:"auto"}}),e._v(" "),a("p",[e._v("俗话说的好：“人往高处走，水往低处流”；古语有云：“落花有意，流水无情”。（"),a("code",[e._v("吃瓜群众：what？你特么这是要弄啥哩！二营长📣")]),e._v("）哎呀🤣，各位大佬，这点小事用不着惊动二营长的意大利炮了吧，进错频道了，马上开始正题！")]),e._v(" "),a("h3",{attrs:{id:"流到底是个什么东西？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流到底是个什么东西？"}},[e._v("#")]),e._v(" 流到底是个什么东西？")]),e._v(" "),a("p",[a("code",[e._v("Node.js的文件系统（fs核心模块）")]),e._v("在我们的开发中应该经常用到，在没有深入了解学习之前，如果有人问我"),a("code",[e._v("Node.js流")]),e._v("到底是个什么东西呢？我当时的表情一定是这样晒的：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/16/165423c935da2d5b?w=240&h=240&f=jpeg&s=4288",alt:""}})]),e._v(" "),a("blockquote",[a("p",[e._v("流到底是个啥？不给提示让我怎么说的出嘴？这种问题，哎呀脑壳痛啊！看来只能去google了（哼~我程序猿早已戒了百度）。")])]),e._v(" "),a("p",[e._v("翻了好几篇大佬写的文章，不能说完全解惑吧，也算是收获满满哦🙃！但是\n呢，还是觉的它有那么点抽象，又有那么点难以理解！痛定思痛下，决定把大佬们的理解在小本本上记下来慢慢理解。（麻麻再也不用担心我下次被问到还蒙圈了）")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("流是数据的集合——就像数组或字符串一样")]),e._v("。区别在于流中的数据可能不会立刻就全部可用，并且无需一次性地把这些数据全部放入内存中。这使得流在操作大量数据或者一次来自外部源的数据时变得非常强大。")])]),e._v(" "),a("blockquote",[a("p",[e._v("来自于："),a("a",{attrs:{href:"https://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js Streams: Everything you need to know"),a("OutboundLink")],1)])]),e._v(" "),a("ul",[a("li",[a("code",[e._v("流是一组有序的，有起点和终点的字节数据传输手段。")]),e._v("在应用程序中各种对象之间交换与传输数据的时候，总是先将该对象中所包含的数据转换为各种形式的流数据（即字节数据），在通过流的传输，到达目的对象后再将流数据转换为该对象中可以使用的数据。")])]),e._v(" "),a("blockquote",[a("p",[e._v("来自于：《Node.js权威指南》")])]),e._v(" "),a("h3",{attrs:{id:"node-js中流的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js中流的类型"}},[e._v("#")]),e._v(" Node.js中流的类型")]),e._v(" "),a("p",[e._v("知道了流是什么，我们还需要了解一下在Node.js中流的类型。流是一个很抽象接口，但是却被Node.js中的很多对象所实现。比如"),a("code",[e._v("HTTP服务器request和response对象都是流。")]),e._v("那我们就先来了解一下Node.js有四种基本的流类型：")]),e._v(" "),a("ul",[a("li",[e._v("Readable：可读流。如Node.js的文件系统（fs）中的"),a("code",[e._v("fs.createReadStream(path,options)")]),e._v("就是一个可读流的例子；")]),e._v(" "),a("li",[e._v("Writable：可写流。如Node.js的文件系统（fs）中的"),a("code",[e._v("fs.createWriteStream(path,options)")]),e._v("就是一个可写流的例子；")]),e._v(" "),a("li",[e._v("Duplex：可读写的流，又称双向流。如Node.js的网络（net）中的net.Socket类；")]),e._v(" "),a("li",[e._v("Transform：在读写过程中可以修改和变换数据的 Duplex 流，又称变换流。如Node.js的压缩（zlib）中的zlib.createDeflate(options)。")])]),e._v(" "),a("blockquote",[a("p",[e._v("在Node.js中，所有的流的实现都继承了EventEmitter（用于实现各种事件处理的event模块）这个类，因此，在读取或者写入数据的过程中，可能会触发各种事件。")])]),e._v(" "),a("h3",{attrs:{id:"createreadstream和createwritestream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#createreadstream和createwritestream"}},[e._v("#")]),e._v(" createReadStream和createWriteStream")]),e._v(" "),a("p",[e._v("现在我们了解了流的含义和类型，那么Node.js中的流是怎么实现的呢？我们都知道"),a("code",[e._v("fs.createReadStream(path,options)")]),e._v("创建一个可读流,"),a("code",[e._v("fs.createWriteStream(path,options)")]),e._v("创建一个可写流,path是读取文件的路径，options是配置参数。（这配置参数也忒多了点，🤔努力记.....）")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("flags")]),e._v("： 可读流默认是'r'，可写流默认是'w'；")]),e._v(" "),a("li",[a("code",[e._v("encoding")]),e._v("： 编码格式。可读流默认是null（其实就是buffer啦），可写流默认是'utf8'；")]),e._v(" "),a("li",[a("code",[e._v("autoClose")]),e._v("：是否自动关闭。默认都是true（就是读完文件或者写入完之后自动把文件关上啦）；")]),e._v(" "),a("li",[a("code",[e._v("mode")]),e._v("： 读取和写入的模式。默认都是0o666（可读可写，八进制）；")]),e._v(" "),a("li",[a("code",[e._v("highWaterMark")]),e._v("： 最高水位线。可读流默认是64 kb（每次最多读取字节数），可写流默认是16 kb（每次最多写入的字节数，也可以理解为占用的最大内存）；")]),e._v(" "),a("li",[a("code",[e._v("start")]),e._v("：开始读取或者开始写入的位置。默认是从0开始的（单位是字节数）；")]),e._v(" "),a("li",[a("code",[e._v("fd")]),e._v("：文件标识符。是Number类型的")]),e._v(" "),a("li",[a("code",[e._v("end")]),e._v("：是可读流独有的，读取文件的最终位置，默认是Infinity（单位是字节数）。")])]),e._v(" "),a("blockquote",[a("p",[e._v("其实，参数虽然比较多，但是都很容易理解。这里需要特别注意的是读取文件的时候，如果start设置为0，end设置为5，那么实际上最终读取的结果是6个字符，即相当于包前又包后！（有点小霸道哦😎）")])]),e._v(" "),a("p",[e._v("在Node.js中，使用"),a("code",[e._v("fs.createReadStream(path,options)")]),e._v("创建可读流和"),a("code",[e._v("fs.createWriteStream(path,options)")]),e._v("创建可写流两个方法很简单，难道我们就甘心仅仅停留在能用、会用的层面吗？No、No、No！我们不仅要会用，还要知道其中的原理，他们是如何实现的？先来创建一个可读流感受一下其用法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 'a.txt'存放十个数字--\x3e 1234567890 \nlet rs = fs.createReadStream('a.txt', {\n  flags: 'r',\n  encoding: 'utf8',\n  autoClose: true,\n  mode: 0o666,\n  start: 0, \n  end:5,\n  highWaterMark: 2 \n});\nrs.on('data',function (data) {\n  console.log(data);\n  rs.pause();\n});\nsetInterval(() => {\n  rs.resume();\n}, 1000);\n// 最后输出的结果是 01 23 45 \n")])])]),a("blockquote",[a("p",[e._v("监听到"),a("code",[e._v("'data'")]),e._v("事件之后，流切换到流动模式,数据会被尽可能快的读出。"),a("code",[e._v("pause、resume")]),e._v("事件是用来暂停和恢复触发"),a("code",[e._v("'data'")]),e._v("事件的（意味着读取文件的操作停止了）。当然还可以监听"),a("code",[e._v("'end'")]),e._v("事件、"),a("code",[e._v("'open'")]),e._v("事件、"),a("code",[e._v("'close'")]),e._v("事件、"),a("code",[e._v("'error'")]),e._v("事件。")])]),e._v(" "),a("p",[e._v("相比较于可读流，我们还应该知道可写流的以下几个特点：")]),e._v(" "),a("ul",[a("li",[e._v("可写流是有"),a("code",[e._v("缓存区的概念的，第一次会真的往文件里写，后面的内容会先写到缓存中")]),e._v("；")]),e._v(" "),a("li",[e._v("可写流写入时会返回一个"),a("code",[e._v("boolean类型")]),e._v(",当返回为false时，就不要在写入了。（但如果返回false之后还有写入操作，还是会写入文件中，因为超过的部分会放到缓存里，这样可能会导致内存的浪费）；")]),e._v(" "),a("li",[e._v("正在写入的内容和缓存中的内容都消耗完后，会触发"),a("code",[e._v("drain事件")]),e._v("。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 如果'a.txt'中有内容，会被写入的内容覆盖掉\nlet ws = fs.createWriteStream('a.txt',{\n  flags: 'w',\n  mode: 0o666,\n  encoding: 'utf8',\n  autoClose: true,\n  start: 0,\n  highWaterMark: 3\n})\nlet flag = ws.write('1');\nconsole.log(flag); // true\nflag = ws.write('1');\nconsole.log(flag); // true\nflag = ws.write('1');\nconsole.log(flag); // false\n")])])]),a("blockquote",[a("p",[e._v("上面例子中，最后一次返回的是"),a("code",[e._v("false")]),e._v("，其实跟设置的"),a("code",[e._v("highWaterMark最高水位线")]),e._v("（设置的当前缓存区大小）有关系了。当写入的内容大于等于"),a("code",[e._v("highWaterMark")]),e._v("时，就会返回"),a("code",[e._v("flase")]),e._v("。")])]),e._v(" "),a("p",[e._v("那我们如何去控制写入的时机，从而不造成内存的浪费呢？请看下面的例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 复用上个例子中的可写流实例，写入时只占用三个字节的内存\nlet i = 0;\nfunction write(){ // 每次写入三个字节，然后停住，写入完成后再继续写入\n  let flag = true;\n  while(i < 9 && flag){\n    flag = ws.write(i + '');\n    i++\n  }\n}\nws.on('drain',function(){ // 达到highWaterMark触发该事件\n  console.log('写入成功');\n  write();\n})\nwrite(); // a.txt文件中--\x3e 012345678\n")])])]),a("h3",{attrs:{id:"实现createreadstream和createwritestream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现createreadstream和createwritestream"}},[e._v("#")]),e._v(" 实现createReadStream和createWriteStream")]),e._v(" "),a("p",[e._v("上面大致了解了"),a("code",[e._v("createReadStream和createWriteStream")]),e._v("的用法和特点，如果我们能自己实现一下可读流和可写流，无疑能加深我们对其的理解。翻看Node.js的源码，"),a("code",[e._v("可读流fs.createReadStream()")]),e._v("执行后返回的是"),a("code",[e._v("ReadStream类")]),e._v("的实例，可写流也是一样的逻辑，代码如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("fs.createReadStream = function(path, options) {\n  return new ReadStream(path, options);\n};\nfs.createWriteStream = function(path, options) {\n  return new WriteStream(path, options);\n};\n")])])]),a("blockquote",[a("p",[e._v("是不是感觉一下子明朗了许多，只要我们能够封装"),a("code",[e._v("ReadStream和WriteStream类")]),e._v("就可以了。为了能够更好的理解，基本每句代码都有注释哦😊！为减少篇幅，这里只贴出来"),a("code",[e._v("核心read方法和write方法")]),e._v("的实现，全部代码请移步"),a("a",{attrs:{href:"https://github.com/chudongyang/createStream",target:"_blank",rel:"noopener noreferrer"}},[e._v("stream"),a("OutboundLink")],1),e._v("下载：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class ReadStream extends EventEmitter{\n  read(){ // 读取文件\n    if (this.finished) { // 读完之后就不再读了\n      return;\n    }\n    // open打开文件是异步的，当我们读取的时候可能文件还没有打开\n    if(typeof this.fd !== 'number'){\n      this.once('open',()=>this.read());\n      return;\n    }\n    // length代表每次读取的字节数\n    let length = this.end ? Math.min(this.highWaterMark, this.end - this.pos + 1) : this.highWaterMark;\n    fs.read(this.fd,this.buffer,0,length,this.pos,(err,bytesRead)=>{\n      if(err){\n        this.emit('error',err);\n        this.destroy();\n        return;\n      }\n      if(bytesRead > 0){ // 读到的字节数 \n        this.pos += bytesRead;\n        let res = this.buffer.slice(0, bytesRead); // 真实读取到的bytesRead可能不能填满this.buffer，需要截取,保留有用的\n        res = this.encoding ? res.toString(this.encoding) : res;\n        this.emit('data', res);\n        if (this.flowing) { // 如果是流动模式，就继续调用read方法读取\n          this.read();\n        }\n      }else {\n        this.finished = true; // 读完的标识\n        this.emit('end');\n        this.destroy();\n      }\n    })\n  }\n}\n")])])]),a("blockquote",[a("p",[a("code",[e._v("可读流ReadStream类")]),e._v("的封装，最主要的就是理解"),a("code",[e._v("read方法")]),e._v("的实现，其他的方法都比较简单好理解。"),a("code",[e._v("read方法")]),e._v("中最难理解的就是"),a("code",[e._v("length变量（要读取的字节数）")]),e._v("，因为读到最后，可能文件中的字节数小于了"),a("code",[e._v("highWaterMark最高水位线")]),e._v("，所以要取"),a("code",[e._v("Math.min()最小值")]),e._v("。打个比方：如果"),a("code",[e._v("this.end = 4;")]),e._v("说明总共需要读取5个字节，"),a("code",[e._v("this.highWaterMark= 3；")]),e._v("说明每次读取3个字节，第一次读完后"),a("code",[e._v("this.pos = 3;")]),e._v("此时还需要在读取2个字节就够了。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class WriteStream extends EventEmitter {\n  // chunk：写入的内容；encoding：编码格式；callback：写入完成后的回调\n  write(chunk,encoding=this.encoding,callback){ // 写入的时候调用的方法\n     // 为了统一，如果传递的是字符串也要转成buffer\n    chunk = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk,encoding);\n    this.len += chunk.length; // 维护缓存的长度\n    let ret = this.highWaterMark > this.len;\n    if(!ret){ \n      this.needDrain = true; // 表示需要触发drain事件\n    }\n    if(this.writing){ // true表示正在写入,应该放在缓存中\n      this.buffer.push({\n        chunk,\n        encoding,\n        callback\n      });\n    }else{ // 第一次写入\n      this.writing = true;\n      this._write(chunk,encoding,()=>this.clearBuffer()); // 实现一个写入的方法\n    }\n    return ret; // write的返回值必须是true/false\n  }\n  _write(chunk,encoding,callback){ // 因为write方法是同步调用的，此时fd可能还没有获取到\n    if(typeof this.fd !== 'number'){ // 判断如果文件还没有打开\n      return this.once('open',()=>this._write(chunk,encoding,callback));\n    }\n    // 参数：fd 文件描述符； chunk是数据； 0：写入的buffer开始的位置； chunk.length写入的字节数； this.pos文件开始写入数据的位置的偏移量\n    fs.write(this.fd,chunk,0,chunk.length,this.pos,(err,bytesWritten)=>{\n      this.pos += bytesWritten;\n      this.len -= bytesWritten; // 每次写入后，内存中的也要相应的减少\n      callback();\n    })\n  }\n  clearBuffer(){ // 清除缓存中的\n    let buf = this.buffer.shift();\n    if(buf){\n      this._write(buf.chunk,buf.encoding,()=>this.clearBuffer());\n    }else{\n      if(this.needDrain){ // 如果需要触发drain\n        this.writing = false;\n        this.needDrain = false;// 触发一次drain 再置回false 方便下次继续判断\n        this.emit('drain');\n      }\n    }\n  }\n}\n")])])]),a("blockquote",[a("p",[e._v("可写流中最主要的就是"),a("code",[e._v("write方法")]),e._v("，其又依赖"),a("code",[e._v("_write方法")]),e._v("和"),a("code",[e._v("clearBuffer方法")]),e._v("。全部代码请移步"),a("a",{attrs:{href:"https://github.com/chudongyang/createStream",target:"_blank",rel:"noopener noreferrer"}},[e._v("stream"),a("OutboundLink")],1),e._v("下载，更好理解哦ｂ（￣▽￣）ｄ！")])]),e._v(" "),a("h3",{attrs:{id:"（四）pipe方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（四）pipe方法"}},[e._v("#")]),e._v(" （四）pipe方法")]),e._v(" "),a("p",[e._v("其实啊，说了这么多，又是理解含义，又是封装代码，都是为了突出"),a("code",[e._v("pipe方法导流")]),e._v("的重要性啊。pipe方法怎么使用呢，请注意（前方高能）：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let fs = require('fs');\nlet rs = fs.createReadStream('a.txt', { \n  highWaterMark: 4\n});\nlet ws = fs.createWriteStream('b.txt', { \n  highWaterMark: 1\n});\nrs.pipe(ws);\n")])])]),a("blockquote",[a("p",[e._v("用法是不是很简单，很直接呀！虽然仅仅这一行的代码,但这正是其神奇之处啊。（说好的高能呢？小板凳都准备好了，你告诉我这些）。\n那我们怎么去实现一个pipe方法呢？其实基于上面"),a("code",[e._v("可读流createReadStream和可写流createWriteStream")]),e._v("的封装，pipe的实现就显得很简单了，在"),a("code",[e._v("ReadStream类的原型上封装pipe方法")]),e._v(",代码如下：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class ReadStream extends EventEmitter{\n  pipe(dest){\n    this.on('data',(data)=>{\n      let flag = dest.write(data);\n      if(!flag){\n        this.pause(); // 不能继续读取了，等写入完成后再继续读取\n      }\n    });\n    dest.on('drain',()=>{\n      this.resume();\n    })\n  }\n}\n")])])]),a("blockquote",[a("p",[e._v("再次友情提示：为了更好的理解，可以移步这里"),a("a",{attrs:{href:"https://github.com/chudongyang/createStream",target:"_blank",rel:"noopener noreferrer"}},[e._v("stream"),a("OutboundLink")],1),e._v("下载全部代码哦(￣▽￣)~*！")])]),e._v(" "),a("ul",[a("li",[e._v("pipe方法又叫管道方法，最大的优点就是可以控制速率（防止淹没可用内存）；")]),e._v(" "),a("li",[e._v("pipe方法的实现原理：可读流实例"),a("code",[e._v("rs")]),e._v("监听"),a("code",[e._v("on('data')方法")]),e._v("，将读取到的内容调用"),a("code",[e._v("ws.write方法")]),e._v("（ws是可写流实例），其方法会返回一个"),a("code",[e._v("boolean类型")]),e._v("，如果返回"),a("code",[e._v("false会调用rs.pause()暂停读取")]),e._v("，等待可写流写入完毕后，调用"),a("code",[e._v("ws.on('drain')在恢复读取")]),e._v("。")])]),e._v(" "),a("p",[e._v("总结：Node.js流到这里就告一段落了，感谢大家的阅读！如果有问题欢迎指出，共同进步哦！如果感觉文章有点晦涩难懂，可以先收藏，方便以后阅读哦❤️！")]),e._v(" "),a("p",[e._v("参考文章：")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js Streams: Everything you need to know"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("《Node.js权威指南》")]),e._v(" "),a("li",[a("a",{attrs:{href:"http://nodejs.cn/api/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js中文网"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);